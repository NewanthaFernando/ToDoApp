// TaskScreen.js
import React from 'react';
import { View, Text, TextInput, TouchableOpacity, StyleSheet, FlatList, Alert } from 'react-native';
import Icon from 'react-native-vector-icons/MaterialIcons';

const TaskScreen = ({ tasks, onAddTask, onDeleteTask, onEditTask, onToggleTask }) => {
  const [newTask, setNewTask] = React.useState('');

  const handleAddTask = () => {
    if (newTask.trim()) {
      onAddTask(newTask);
      setNewTask('');
    } else {
      Alert.alert('Error', 'Task cannot be empty');
    }
  };

  const renderItem = ({ item }) => (
    <View style={styles.taskItem}>
      <TouchableOpacity onPress={() => onToggleTask(item.id)}>
        <Icon name={item.completed ? "check-box" : "check-box-outline-blank"} size={24} color="#6e00ff" />
      </TouchableOpacity>
      <TextInput
        style={[styles.taskInput, item.completed && styles.completedTask]}
        value={item.text}
        onChangeText={(text) => onEditTask(item.id, text)}
        editable={!item.completed} // Prevent editing if task is completed
      />
      <TouchableOpacity onPress={() => onDeleteTask(item.id)}>
        <Icon name="delete" size={24} color="#ff4d4d" />
      </TouchableOpacity>
    </View>
  );

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Manage Your Tasks</Text>
      
      <View style={styles.addTaskContainer}>
        <TextInput
          placeholder="Add a new task"
          style={styles.input}
          value={newTask}
          onChangeText={setNewTask}
        />
        <TouchableOpacity style={styles.addButton} onPress={handleAddTask}>
          <Text style={styles.addButtonText}>Add Task</Text>
        </TouchableOpacity>
      </View>

      <Text style={styles.subtitle}>Pending Tasks</Text>
      <FlatList
        data={tasks.filter(task => !task.completed)}
        renderItem={renderItem}
        keyExtractor={item => item.id}
      />

      <Text style={styles.subtitle}>Completed Tasks</Text>
      <FlatList
        data={tasks.filter(task => task.completed)}
        renderItem={renderItem}
        keyExtractor={item => item.id}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: '#f5f5f5',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
    color: '#333',
  },
  subtitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginTop: 20,
    marginBottom: 10,
    color: '#333',
  },
  addTaskContainer: {
    flexDirection: 'row',
    marginBottom: 20,
  },
  input: {
    flex: 1,
    padding: 15,
    borderRadius: 25,
    backgroundColor: '#fff',
    borderColor: '#ddd',
    borderWidth: 1,
    marginRight: 10,
  },
  addButton: {
    padding: 15,
    backgroundColor: '#6e00ff',
    borderRadius: 25,
    justifyContent: 'center',
    alignItems: 'center',
  },
  addButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  taskItem: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#fff',
    padding: 15,
    borderRadius: 10,
    marginBottom: 10,
    borderColor: '#ddd',
    borderWidth: 1,
  },
  taskInput: {
    flex: 1,
    fontSize: 16,
    color: '#333',
  },
  completedTask: {
    textDecorationLine: 'line-through',
    color: '#aaa',
  },
});

export default TaskScreen;
